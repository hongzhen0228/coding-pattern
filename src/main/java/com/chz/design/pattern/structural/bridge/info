桥接模式

将抽象部分和他们的具体实现部分分离，使他们可以独立的变化
通过组合的方式建立两个类质检的联系，而不是继承
结构型

适用场景
抽象和具体实现质检需要增加更多灵活性
一个类存在多个变化的维度，而且者两个维度都需要独立的进行拓展
不希望使用继承，或因为多层继承导致系统类个数剧增

优点
分离抽象部分和具体实现部分
提高了系统的可拓展性
符合开闭原则
符合合成复用原则

缺点
增加了系统的理解和设计的难度
需要正确的识别出系统中两个独立变化的维度